// Code generated by mockery v2.50.0. DO NOT EDIT.

package httputils

import mock "github.com/stretchr/testify/mock"

// MockCdiHTTPClient is an autogenerated mock type for the CdiHTTPClient type
type MockCdiHTTPClient struct {
	mock.Mock
}

type MockCdiHTTPClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCdiHTTPClient) EXPECT() *MockCdiHTTPClient_Expecter {
	return &MockCdiHTTPClient_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: endpoint, queryParams, responseAddress, headers
func (_m *MockCdiHTTPClient) Delete(endpoint string, queryParams map[string]string, responseAddress interface{}, headers map[string]string) (int, error) {
	ret := _m.Called(endpoint, queryParams, responseAddress, headers)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]string, interface{}, map[string]string) (int, error)); ok {
		return rf(endpoint, queryParams, responseAddress, headers)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]string, interface{}, map[string]string) int); ok {
		r0 = rf(endpoint, queryParams, responseAddress, headers)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, map[string]string, interface{}, map[string]string) error); ok {
		r1 = rf(endpoint, queryParams, responseAddress, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCdiHTTPClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCdiHTTPClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - endpoint string
//   - queryParams map[string]string
//   - responseAddress interface{}
//   - headers map[string]string
func (_e *MockCdiHTTPClient_Expecter) Delete(endpoint interface{}, queryParams interface{}, responseAddress interface{}, headers interface{}) *MockCdiHTTPClient_Delete_Call {
	return &MockCdiHTTPClient_Delete_Call{Call: _e.mock.On("Delete", endpoint, queryParams, responseAddress, headers)}
}

func (_c *MockCdiHTTPClient_Delete_Call) Run(run func(endpoint string, queryParams map[string]string, responseAddress interface{}, headers map[string]string)) *MockCdiHTTPClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]string), args[2].(interface{}), args[3].(map[string]string))
	})
	return _c
}

func (_c *MockCdiHTTPClient_Delete_Call) Return(_a0 int, _a1 error) *MockCdiHTTPClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCdiHTTPClient_Delete_Call) RunAndReturn(run func(string, map[string]string, interface{}, map[string]string) (int, error)) *MockCdiHTTPClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: endpoint, queryParams, responseAddress, headers
func (_m *MockCdiHTTPClient) Get(endpoint string, queryParams map[string]string, responseAddress interface{}, headers map[string]string) (int, error) {
	ret := _m.Called(endpoint, queryParams, responseAddress, headers)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]string, interface{}, map[string]string) (int, error)); ok {
		return rf(endpoint, queryParams, responseAddress, headers)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]string, interface{}, map[string]string) int); ok {
		r0 = rf(endpoint, queryParams, responseAddress, headers)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, map[string]string, interface{}, map[string]string) error); ok {
		r1 = rf(endpoint, queryParams, responseAddress, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCdiHTTPClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCdiHTTPClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - endpoint string
//   - queryParams map[string]string
//   - responseAddress interface{}
//   - headers map[string]string
func (_e *MockCdiHTTPClient_Expecter) Get(endpoint interface{}, queryParams interface{}, responseAddress interface{}, headers interface{}) *MockCdiHTTPClient_Get_Call {
	return &MockCdiHTTPClient_Get_Call{Call: _e.mock.On("Get", endpoint, queryParams, responseAddress, headers)}
}

func (_c *MockCdiHTTPClient_Get_Call) Run(run func(endpoint string, queryParams map[string]string, responseAddress interface{}, headers map[string]string)) *MockCdiHTTPClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]string), args[2].(interface{}), args[3].(map[string]string))
	})
	return _c
}

func (_c *MockCdiHTTPClient_Get_Call) Return(_a0 int, _a1 error) *MockCdiHTTPClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCdiHTTPClient_Get_Call) RunAndReturn(run func(string, map[string]string, interface{}, map[string]string) (int, error)) *MockCdiHTTPClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function with given fields: payload, endpoint, queryParams, responseAddress, headers
func (_m *MockCdiHTTPClient) Post(payload []byte, endpoint string, queryParams map[string]string, responseAddress interface{}, headers map[string]string) (int, error) {
	ret := _m.Called(payload, endpoint, queryParams, responseAddress, headers)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string, map[string]string, interface{}, map[string]string) (int, error)); ok {
		return rf(payload, endpoint, queryParams, responseAddress, headers)
	}
	if rf, ok := ret.Get(0).(func([]byte, string, map[string]string, interface{}, map[string]string) int); ok {
		r0 = rf(payload, endpoint, queryParams, responseAddress, headers)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte, string, map[string]string, interface{}, map[string]string) error); ok {
		r1 = rf(payload, endpoint, queryParams, responseAddress, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCdiHTTPClient_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type MockCdiHTTPClient_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - payload []byte
//   - endpoint string
//   - queryParams map[string]string
//   - responseAddress interface{}
//   - headers map[string]string
func (_e *MockCdiHTTPClient_Expecter) Post(payload interface{}, endpoint interface{}, queryParams interface{}, responseAddress interface{}, headers interface{}) *MockCdiHTTPClient_Post_Call {
	return &MockCdiHTTPClient_Post_Call{Call: _e.mock.On("Post", payload, endpoint, queryParams, responseAddress, headers)}
}

func (_c *MockCdiHTTPClient_Post_Call) Run(run func(payload []byte, endpoint string, queryParams map[string]string, responseAddress interface{}, headers map[string]string)) *MockCdiHTTPClient_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string), args[2].(map[string]string), args[3].(interface{}), args[4].(map[string]string))
	})
	return _c
}

func (_c *MockCdiHTTPClient_Post_Call) Return(_a0 int, _a1 error) *MockCdiHTTPClient_Post_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCdiHTTPClient_Post_Call) RunAndReturn(run func([]byte, string, map[string]string, interface{}, map[string]string) (int, error)) *MockCdiHTTPClient_Post_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: payload, endpoint, queryParams, responseAddress, headers
func (_m *MockCdiHTTPClient) Put(payload []byte, endpoint string, queryParams map[string]string, responseAddress interface{}, headers map[string]string) (int, error) {
	ret := _m.Called(payload, endpoint, queryParams, responseAddress, headers)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string, map[string]string, interface{}, map[string]string) (int, error)); ok {
		return rf(payload, endpoint, queryParams, responseAddress, headers)
	}
	if rf, ok := ret.Get(0).(func([]byte, string, map[string]string, interface{}, map[string]string) int); ok {
		r0 = rf(payload, endpoint, queryParams, responseAddress, headers)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte, string, map[string]string, interface{}, map[string]string) error); ok {
		r1 = rf(payload, endpoint, queryParams, responseAddress, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCdiHTTPClient_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockCdiHTTPClient_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - payload []byte
//   - endpoint string
//   - queryParams map[string]string
//   - responseAddress interface{}
//   - headers map[string]string
func (_e *MockCdiHTTPClient_Expecter) Put(payload interface{}, endpoint interface{}, queryParams interface{}, responseAddress interface{}, headers interface{}) *MockCdiHTTPClient_Put_Call {
	return &MockCdiHTTPClient_Put_Call{Call: _e.mock.On("Put", payload, endpoint, queryParams, responseAddress, headers)}
}

func (_c *MockCdiHTTPClient_Put_Call) Run(run func(payload []byte, endpoint string, queryParams map[string]string, responseAddress interface{}, headers map[string]string)) *MockCdiHTTPClient_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string), args[2].(map[string]string), args[3].(interface{}), args[4].(map[string]string))
	})
	return _c
}

func (_c *MockCdiHTTPClient_Put_Call) Return(_a0 int, _a1 error) *MockCdiHTTPClient_Put_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCdiHTTPClient_Put_Call) RunAndReturn(run func([]byte, string, map[string]string, interface{}, map[string]string) (int, error)) *MockCdiHTTPClient_Put_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCdiHTTPClient creates a new instance of MockCdiHTTPClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCdiHTTPClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCdiHTTPClient {
	mock := &MockCdiHTTPClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
