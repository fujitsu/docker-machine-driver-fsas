// Code generated by mockery v2.50.0. DO NOT EDIT.

package keycloak

import mock "github.com/stretchr/testify/mock"

// MockKeycloak is an autogenerated mock type for the Keycloak type
type MockKeycloak struct {
	mock.Mock
}

type MockKeycloak_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeycloak) EXPECT() *MockKeycloak_Expecter {
	return &MockKeycloak_Expecter{mock: &_m.Mock}
}

// GetToken provides a mock function with no fields
func (_m *MockKeycloak) GetToken() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockKeycloak_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type MockKeycloak_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
func (_e *MockKeycloak_Expecter) GetToken() *MockKeycloak_GetToken_Call {
	return &MockKeycloak_GetToken_Call{Call: _e.mock.On("GetToken")}
}

func (_c *MockKeycloak_GetToken_Call) Run(run func()) *MockKeycloak_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeycloak_GetToken_Call) Return(_a0 string) *MockKeycloak_GetToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeycloak_GetToken_Call) RunAndReturn(run func() string) *MockKeycloak_GetToken_Call {
	_c.Call.Return(run)
	return _c
}

// InitConnection provides a mock function with no fields
func (_m *MockKeycloak) InitConnection() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeycloak_InitConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitConnection'
type MockKeycloak_InitConnection_Call struct {
	*mock.Call
}

// InitConnection is a helper method to define mock.On call
func (_e *MockKeycloak_Expecter) InitConnection() *MockKeycloak_InitConnection_Call {
	return &MockKeycloak_InitConnection_Call{Call: _e.mock.On("InitConnection")}
}

func (_c *MockKeycloak_InitConnection_Call) Run(run func()) *MockKeycloak_InitConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeycloak_InitConnection_Call) Return(_a0 error) *MockKeycloak_InitConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeycloak_InitConnection_Call) RunAndReturn(run func() error) *MockKeycloak_InitConnection_Call {
	_c.Call.Return(run)
	return _c
}

// IsInit provides a mock function with no fields
func (_m *MockKeycloak) IsInit() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInit")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockKeycloak_IsInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInit'
type MockKeycloak_IsInit_Call struct {
	*mock.Call
}

// IsInit is a helper method to define mock.On call
func (_e *MockKeycloak_Expecter) IsInit() *MockKeycloak_IsInit_Call {
	return &MockKeycloak_IsInit_Call{Call: _e.mock.On("IsInit")}
}

func (_c *MockKeycloak_IsInit_Call) Run(run func()) *MockKeycloak_IsInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeycloak_IsInit_Call) Return(_a0 bool) *MockKeycloak_IsInit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeycloak_IsInit_Call) RunAndReturn(run func() bool) *MockKeycloak_IsInit_Call {
	_c.Call.Return(run)
	return _c
}

// UserIsAllowedToCreateCluster provides a mock function with no fields
func (_m *MockKeycloak) UserIsAllowedToCreateCluster() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserIsAllowedToCreateCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeycloak_UserIsAllowedToCreateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserIsAllowedToCreateCluster'
type MockKeycloak_UserIsAllowedToCreateCluster_Call struct {
	*mock.Call
}

// UserIsAllowedToCreateCluster is a helper method to define mock.On call
func (_e *MockKeycloak_Expecter) UserIsAllowedToCreateCluster() *MockKeycloak_UserIsAllowedToCreateCluster_Call {
	return &MockKeycloak_UserIsAllowedToCreateCluster_Call{Call: _e.mock.On("UserIsAllowedToCreateCluster")}
}

func (_c *MockKeycloak_UserIsAllowedToCreateCluster_Call) Run(run func()) *MockKeycloak_UserIsAllowedToCreateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeycloak_UserIsAllowedToCreateCluster_Call) Return(_a0 error) *MockKeycloak_UserIsAllowedToCreateCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeycloak_UserIsAllowedToCreateCluster_Call) RunAndReturn(run func() error) *MockKeycloak_UserIsAllowedToCreateCluster_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeycloak creates a new instance of MockKeycloak. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeycloak(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeycloak {
	mock := &MockKeycloak{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
