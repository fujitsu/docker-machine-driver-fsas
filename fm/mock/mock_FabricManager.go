// Code generated by mockery v2.50.0. DO NOT EDIT.

package fm

import (
	models "github.com/fujitsu/docker-machine-driver-fsas/models"
	mock "github.com/stretchr/testify/mock"
)

// MockFabricManager is an autogenerated mock type for the FabricManager type
type MockFabricManager struct {
	mock.Mock
}

type MockFabricManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFabricManager) EXPECT() *MockFabricManager_Expecter {
	return &MockFabricManager_Expecter{mock: &_m.Mock}
}

// CreateMachine provides a mock function with given fields: machineName, tenantId, machineSpecs, bearerToken
func (_m *MockFabricManager) CreateMachine(machineName string, tenantId string, machineSpecs models.MachineSpecsArgs, bearerToken string) (string, error) {
	ret := _m.Called(machineName, tenantId, machineSpecs, bearerToken)

	if len(ret) == 0 {
		panic("no return value specified for CreateMachine")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, models.MachineSpecsArgs, string) (string, error)); ok {
		return rf(machineName, tenantId, machineSpecs, bearerToken)
	}
	if rf, ok := ret.Get(0).(func(string, string, models.MachineSpecsArgs, string) string); ok {
		r0 = rf(machineName, tenantId, machineSpecs, bearerToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, models.MachineSpecsArgs, string) error); ok {
		r1 = rf(machineName, tenantId, machineSpecs, bearerToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFabricManager_CreateMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMachine'
type MockFabricManager_CreateMachine_Call struct {
	*mock.Call
}

// CreateMachine is a helper method to define mock.On call
//   - machineName string
//   - tenantId string
//   - machineSpecs models.MachineSpecsArgs
//   - bearerToken string
func (_e *MockFabricManager_Expecter) CreateMachine(machineName interface{}, tenantId interface{}, machineSpecs interface{}, bearerToken interface{}) *MockFabricManager_CreateMachine_Call {
	return &MockFabricManager_CreateMachine_Call{Call: _e.mock.On("CreateMachine", machineName, tenantId, machineSpecs, bearerToken)}
}

func (_c *MockFabricManager_CreateMachine_Call) Run(run func(machineName string, tenantId string, machineSpecs models.MachineSpecsArgs, bearerToken string)) *MockFabricManager_CreateMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(models.MachineSpecsArgs), args[3].(string))
	})
	return _c
}

func (_c *MockFabricManager_CreateMachine_Call) Return(_a0 string, _a1 error) *MockFabricManager_CreateMachine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFabricManager_CreateMachine_Call) RunAndReturn(run func(string, string, models.MachineSpecsArgs, string) (string, error)) *MockFabricManager_CreateMachine_Call {
	_c.Call.Return(run)
	return _c
}

// GetMachineDetails provides a mock function with given fields: tenantId, machineUUID, bearerToken
func (_m *MockFabricManager) GetMachineDetails(tenantId string, machineUUID string, bearerToken string) ([]models.Lanport, string, int, error) {
	ret := _m.Called(tenantId, machineUUID, bearerToken)

	if len(ret) == 0 {
		panic("no return value specified for GetMachineDetails")
	}

	var r0 []models.Lanport
	var r1 string
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]models.Lanport, string, int, error)); ok {
		return rf(tenantId, machineUUID, bearerToken)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []models.Lanport); ok {
		r0 = rf(tenantId, machineUUID, bearerToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Lanport)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) string); ok {
		r1 = rf(tenantId, machineUUID, bearerToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, string) int); ok {
		r2 = rf(tenantId, machineUUID, bearerToken)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(string, string, string) error); ok {
		r3 = rf(tenantId, machineUUID, bearerToken)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockFabricManager_GetMachineDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMachineDetails'
type MockFabricManager_GetMachineDetails_Call struct {
	*mock.Call
}

// GetMachineDetails is a helper method to define mock.On call
//   - tenantId string
//   - machineUUID string
//   - bearerToken string
func (_e *MockFabricManager_Expecter) GetMachineDetails(tenantId interface{}, machineUUID interface{}, bearerToken interface{}) *MockFabricManager_GetMachineDetails_Call {
	return &MockFabricManager_GetMachineDetails_Call{Call: _e.mock.On("GetMachineDetails", tenantId, machineUUID, bearerToken)}
}

func (_c *MockFabricManager_GetMachineDetails_Call) Run(run func(tenantId string, machineUUID string, bearerToken string)) *MockFabricManager_GetMachineDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockFabricManager_GetMachineDetails_Call) Return(_a0 []models.Lanport, _a1 string, _a2 int, _a3 error) *MockFabricManager_GetMachineDetails_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MockFabricManager_GetMachineDetails_Call) RunAndReturn(run func(string, string, string) ([]models.Lanport, string, int, error)) *MockFabricManager_GetMachineDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GracefulShutdown provides a mock function with given fields: machineUUID, tenantId, bearerToken
func (_m *MockFabricManager) GracefulShutdown(machineUUID string, tenantId string, bearerToken string) error {
	ret := _m.Called(machineUUID, tenantId, bearerToken)

	if len(ret) == 0 {
		panic("no return value specified for GracefulShutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(machineUUID, tenantId, bearerToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFabricManager_GracefulShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GracefulShutdown'
type MockFabricManager_GracefulShutdown_Call struct {
	*mock.Call
}

// GracefulShutdown is a helper method to define mock.On call
//   - machineUUID string
//   - tenantId string
//   - bearerToken string
func (_e *MockFabricManager_Expecter) GracefulShutdown(machineUUID interface{}, tenantId interface{}, bearerToken interface{}) *MockFabricManager_GracefulShutdown_Call {
	return &MockFabricManager_GracefulShutdown_Call{Call: _e.mock.On("GracefulShutdown", machineUUID, tenantId, bearerToken)}
}

func (_c *MockFabricManager_GracefulShutdown_Call) Run(run func(machineUUID string, tenantId string, bearerToken string)) *MockFabricManager_GracefulShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockFabricManager_GracefulShutdown_Call) Return(_a0 error) *MockFabricManager_GracefulShutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFabricManager_GracefulShutdown_Call) RunAndReturn(run func(string, string, string) error) *MockFabricManager_GracefulShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// ImageInstall provides a mock function with given fields: tenantId, ssdId, imageFilename, bearerToken
func (_m *MockFabricManager) ImageInstall(tenantId string, ssdId string, imageFilename string, bearerToken string) error {
	ret := _m.Called(tenantId, ssdId, imageFilename, bearerToken)

	if len(ret) == 0 {
		panic("no return value specified for ImageInstall")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(tenantId, ssdId, imageFilename, bearerToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFabricManager_ImageInstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageInstall'
type MockFabricManager_ImageInstall_Call struct {
	*mock.Call
}

// ImageInstall is a helper method to define mock.On call
//   - tenantId string
//   - ssdId string
//   - imageFilename string
//   - bearerToken string
func (_e *MockFabricManager_Expecter) ImageInstall(tenantId interface{}, ssdId interface{}, imageFilename interface{}, bearerToken interface{}) *MockFabricManager_ImageInstall_Call {
	return &MockFabricManager_ImageInstall_Call{Call: _e.mock.On("ImageInstall", tenantId, ssdId, imageFilename, bearerToken)}
}

func (_c *MockFabricManager_ImageInstall_Call) Run(run func(tenantId string, ssdId string, imageFilename string, bearerToken string)) *MockFabricManager_ImageInstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockFabricManager_ImageInstall_Call) Return(_a0 error) *MockFabricManager_ImageInstall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFabricManager_ImageInstall_Call) RunAndReturn(run func(string, string, string, string) error) *MockFabricManager_ImageInstall_Call {
	_c.Call.Return(run)
	return _c
}

// IsInit provides a mock function with no fields
func (_m *MockFabricManager) IsInit() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInit")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockFabricManager_IsInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInit'
type MockFabricManager_IsInit_Call struct {
	*mock.Call
}

// IsInit is a helper method to define mock.On call
func (_e *MockFabricManager_Expecter) IsInit() *MockFabricManager_IsInit_Call {
	return &MockFabricManager_IsInit_Call{Call: _e.mock.On("IsInit")}
}

func (_c *MockFabricManager_IsInit_Call) Run(run func()) *MockFabricManager_IsInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFabricManager_IsInit_Call) Return(_a0 bool) *MockFabricManager_IsInit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFabricManager_IsInit_Call) RunAndReturn(run func() bool) *MockFabricManager_IsInit_Call {
	_c.Call.Return(run)
	return _c
}

// PowerOff provides a mock function with given fields: machineUUID, tenantId, bearerToken
func (_m *MockFabricManager) PowerOff(machineUUID string, tenantId string, bearerToken string) error {
	ret := _m.Called(machineUUID, tenantId, bearerToken)

	if len(ret) == 0 {
		panic("no return value specified for PowerOff")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(machineUUID, tenantId, bearerToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFabricManager_PowerOff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PowerOff'
type MockFabricManager_PowerOff_Call struct {
	*mock.Call
}

// PowerOff is a helper method to define mock.On call
//   - machineUUID string
//   - tenantId string
//   - bearerToken string
func (_e *MockFabricManager_Expecter) PowerOff(machineUUID interface{}, tenantId interface{}, bearerToken interface{}) *MockFabricManager_PowerOff_Call {
	return &MockFabricManager_PowerOff_Call{Call: _e.mock.On("PowerOff", machineUUID, tenantId, bearerToken)}
}

func (_c *MockFabricManager_PowerOff_Call) Run(run func(machineUUID string, tenantId string, bearerToken string)) *MockFabricManager_PowerOff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockFabricManager_PowerOff_Call) Return(_a0 error) *MockFabricManager_PowerOff_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFabricManager_PowerOff_Call) RunAndReturn(run func(string, string, string) error) *MockFabricManager_PowerOff_Call {
	_c.Call.Return(run)
	return _c
}

// PowerOn provides a mock function with given fields: machineUUID, tenantId, bearerToken
func (_m *MockFabricManager) PowerOn(machineUUID string, tenantId string, bearerToken string) error {
	ret := _m.Called(machineUUID, tenantId, bearerToken)

	if len(ret) == 0 {
		panic("no return value specified for PowerOn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(machineUUID, tenantId, bearerToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFabricManager_PowerOn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PowerOn'
type MockFabricManager_PowerOn_Call struct {
	*mock.Call
}

// PowerOn is a helper method to define mock.On call
//   - machineUUID string
//   - tenantId string
//   - bearerToken string
func (_e *MockFabricManager_Expecter) PowerOn(machineUUID interface{}, tenantId interface{}, bearerToken interface{}) *MockFabricManager_PowerOn_Call {
	return &MockFabricManager_PowerOn_Call{Call: _e.mock.On("PowerOn", machineUUID, tenantId, bearerToken)}
}

func (_c *MockFabricManager_PowerOn_Call) Run(run func(machineUUID string, tenantId string, bearerToken string)) *MockFabricManager_PowerOn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockFabricManager_PowerOn_Call) Return(_a0 error) *MockFabricManager_PowerOn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFabricManager_PowerOn_Call) RunAndReturn(run func(string, string, string) error) *MockFabricManager_PowerOn_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMachine provides a mock function with given fields: machineUUID, tenantId, bearerToken
func (_m *MockFabricManager) RemoveMachine(machineUUID string, tenantId string, bearerToken string) error {
	ret := _m.Called(machineUUID, tenantId, bearerToken)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMachine")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(machineUUID, tenantId, bearerToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFabricManager_RemoveMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMachine'
type MockFabricManager_RemoveMachine_Call struct {
	*mock.Call
}

// RemoveMachine is a helper method to define mock.On call
//   - machineUUID string
//   - tenantId string
//   - bearerToken string
func (_e *MockFabricManager_Expecter) RemoveMachine(machineUUID interface{}, tenantId interface{}, bearerToken interface{}) *MockFabricManager_RemoveMachine_Call {
	return &MockFabricManager_RemoveMachine_Call{Call: _e.mock.On("RemoveMachine", machineUUID, tenantId, bearerToken)}
}

func (_c *MockFabricManager_RemoveMachine_Call) Run(run func(machineUUID string, tenantId string, bearerToken string)) *MockFabricManager_RemoveMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockFabricManager_RemoveMachine_Call) Return(_a0 error) *MockFabricManager_RemoveMachine_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFabricManager_RemoveMachine_Call) RunAndReturn(run func(string, string, string) error) *MockFabricManager_RemoveMachine_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTenant provides a mock function with given fields: tenantId, bearerToken
func (_m *MockFabricManager) ValidateTenant(tenantId string, bearerToken string) error {
	ret := _m.Called(tenantId, bearerToken)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTenant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(tenantId, bearerToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFabricManager_ValidateTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTenant'
type MockFabricManager_ValidateTenant_Call struct {
	*mock.Call
}

// ValidateTenant is a helper method to define mock.On call
//   - tenantId string
//   - bearerToken string
func (_e *MockFabricManager_Expecter) ValidateTenant(tenantId interface{}, bearerToken interface{}) *MockFabricManager_ValidateTenant_Call {
	return &MockFabricManager_ValidateTenant_Call{Call: _e.mock.On("ValidateTenant", tenantId, bearerToken)}
}

func (_c *MockFabricManager_ValidateTenant_Call) Run(run func(tenantId string, bearerToken string)) *MockFabricManager_ValidateTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockFabricManager_ValidateTenant_Call) Return(_a0 error) *MockFabricManager_ValidateTenant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFabricManager_ValidateTenant_Call) RunAndReturn(run func(string, string) error) *MockFabricManager_ValidateTenant_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFabricManager creates a new instance of MockFabricManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFabricManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFabricManager {
	mock := &MockFabricManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
