// Code generated by mockery v2.50.0. DO NOT EDIT.

package sshutils

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// MockSshManager is an autogenerated mock type for the SshManager type
type MockSshManager struct {
	mock.Mock
}

type MockSshManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSshManager) EXPECT() *MockSshManager_Expecter {
	return &MockSshManager_Expecter{mock: &_m.Mock}
}

// DisablePasswordSSHLogin provides a mock function with no fields
func (_m *MockSshManager) DisablePasswordSSHLogin() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DisablePasswordSSHLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSshManager_DisablePasswordSSHLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisablePasswordSSHLogin'
type MockSshManager_DisablePasswordSSHLogin_Call struct {
	*mock.Call
}

// DisablePasswordSSHLogin is a helper method to define mock.On call
func (_e *MockSshManager_Expecter) DisablePasswordSSHLogin() *MockSshManager_DisablePasswordSSHLogin_Call {
	return &MockSshManager_DisablePasswordSSHLogin_Call{Call: _e.mock.On("DisablePasswordSSHLogin")}
}

func (_c *MockSshManager_DisablePasswordSSHLogin_Call) Run(run func()) *MockSshManager_DisablePasswordSSHLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSshManager_DisablePasswordSSHLogin_Call) Return(_a0 error) *MockSshManager_DisablePasswordSSHLogin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSshManager_DisablePasswordSSHLogin_Call) RunAndReturn(run func() error) *MockSshManager_DisablePasswordSSHLogin_Call {
	_c.Call.Return(run)
	return _c
}

// ExchangeKeys provides a mock function with given fields: sshKeyPath
func (_m *MockSshManager) ExchangeKeys(sshKeyPath string) error {
	ret := _m.Called(sshKeyPath)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeKeys")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sshKeyPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSshManager_ExchangeKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeKeys'
type MockSshManager_ExchangeKeys_Call struct {
	*mock.Call
}

// ExchangeKeys is a helper method to define mock.On call
//   - sshKeyPath string
func (_e *MockSshManager_Expecter) ExchangeKeys(sshKeyPath interface{}) *MockSshManager_ExchangeKeys_Call {
	return &MockSshManager_ExchangeKeys_Call{Call: _e.mock.On("ExchangeKeys", sshKeyPath)}
}

func (_c *MockSshManager_ExchangeKeys_Call) Run(run func(sshKeyPath string)) *MockSshManager_ExchangeKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSshManager_ExchangeKeys_Call) Return(_a0 error) *MockSshManager_ExchangeKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSshManager_ExchangeKeys_Call) RunAndReturn(run func(string) error) *MockSshManager_ExchangeKeys_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteScript provides a mock function with given fields: scriptPath, scriptContent, postRemove, runWithSudo
func (_m *MockSshManager) ExecuteScript(scriptPath string, scriptContent string, postRemove bool, runWithSudo bool) error {
	ret := _m.Called(scriptPath, scriptContent, postRemove, runWithSudo)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteScript")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, bool) error); ok {
		r0 = rf(scriptPath, scriptContent, postRemove, runWithSudo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSshManager_ExecuteScript_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteScript'
type MockSshManager_ExecuteScript_Call struct {
	*mock.Call
}

// ExecuteScript is a helper method to define mock.On call
//   - scriptPath string
//   - scriptContent string
//   - postRemove bool
//   - runWithSudo bool
func (_e *MockSshManager_Expecter) ExecuteScript(scriptPath interface{}, scriptContent interface{}, postRemove interface{}, runWithSudo interface{}) *MockSshManager_ExecuteScript_Call {
	return &MockSshManager_ExecuteScript_Call{Call: _e.mock.On("ExecuteScript", scriptPath, scriptContent, postRemove, runWithSudo)}
}

func (_c *MockSshManager_ExecuteScript_Call) Run(run func(scriptPath string, scriptContent string, postRemove bool, runWithSudo bool)) *MockSshManager_ExecuteScript_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool), args[3].(bool))
	})
	return _c
}

func (_c *MockSshManager_ExecuteScript_Call) Return(_a0 error) *MockSshManager_ExecuteScript_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSshManager_ExecuteScript_Call) RunAndReturn(run func(string, string, bool, bool) error) *MockSshManager_ExecuteScript_Call {
	_c.Call.Return(run)
	return _c
}

// IsInit provides a mock function with no fields
func (_m *MockSshManager) IsInit() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInit")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSshManager_IsInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInit'
type MockSshManager_IsInit_Call struct {
	*mock.Call
}

// IsInit is a helper method to define mock.On call
func (_e *MockSshManager_Expecter) IsInit() *MockSshManager_IsInit_Call {
	return &MockSshManager_IsInit_Call{Call: _e.mock.On("IsInit")}
}

func (_c *MockSshManager_IsInit_Call) Run(run func()) *MockSshManager_IsInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSshManager_IsInit_Call) Return(_a0 bool) *MockSshManager_IsInit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSshManager_IsInit_Call) RunAndReturn(run func() bool) *MockSshManager_IsInit_Call {
	_c.Call.Return(run)
	return _c
}

// RebootCloudInit provides a mock function with no fields
func (_m *MockSshManager) RebootCloudInit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RebootCloudInit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSshManager_RebootCloudInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RebootCloudInit'
type MockSshManager_RebootCloudInit_Call struct {
	*mock.Call
}

// RebootCloudInit is a helper method to define mock.On call
func (_e *MockSshManager_Expecter) RebootCloudInit() *MockSshManager_RebootCloudInit_Call {
	return &MockSshManager_RebootCloudInit_Call{Call: _e.mock.On("RebootCloudInit")}
}

func (_c *MockSshManager_RebootCloudInit_Call) Run(run func()) *MockSshManager_RebootCloudInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSshManager_RebootCloudInit_Call) Return(_a0 error) *MockSshManager_RebootCloudInit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSshManager_RebootCloudInit_Call) RunAndReturn(run func() error) *MockSshManager_RebootCloudInit_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFileOnRemoteMachine provides a mock function with given fields: path, fileContent, fileMode
func (_m *MockSshManager) WriteFileOnRemoteMachine(path string, fileContent string, fileMode fs.FileMode) error {
	ret := _m.Called(path, fileContent, fileMode)

	if len(ret) == 0 {
		panic("no return value specified for WriteFileOnRemoteMachine")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, fs.FileMode) error); ok {
		r0 = rf(path, fileContent, fileMode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSshManager_WriteFileOnRemoteMachine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFileOnRemoteMachine'
type MockSshManager_WriteFileOnRemoteMachine_Call struct {
	*mock.Call
}

// WriteFileOnRemoteMachine is a helper method to define mock.On call
//   - path string
//   - fileContent string
//   - fileMode fs.FileMode
func (_e *MockSshManager_Expecter) WriteFileOnRemoteMachine(path interface{}, fileContent interface{}, fileMode interface{}) *MockSshManager_WriteFileOnRemoteMachine_Call {
	return &MockSshManager_WriteFileOnRemoteMachine_Call{Call: _e.mock.On("WriteFileOnRemoteMachine", path, fileContent, fileMode)}
}

func (_c *MockSshManager_WriteFileOnRemoteMachine_Call) Run(run func(path string, fileContent string, fileMode fs.FileMode)) *MockSshManager_WriteFileOnRemoteMachine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(fs.FileMode))
	})
	return _c
}

func (_c *MockSshManager_WriteFileOnRemoteMachine_Call) Return(_a0 error) *MockSshManager_WriteFileOnRemoteMachine_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSshManager_WriteFileOnRemoteMachine_Call) RunAndReturn(run func(string, string, fs.FileMode) error) *MockSshManager_WriteFileOnRemoteMachine_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSshManager creates a new instance of MockSshManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSshManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSshManager {
	mock := &MockSshManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
