// Code generated by mockery v2.50.0. DO NOT EDIT.

package sshutils

import (
	mock "github.com/stretchr/testify/mock"
	ssh "golang.org/x/crypto/ssh"
)

// MockSSHKeyParser is an autogenerated mock type for the SSHKeyParser type
type MockSSHKeyParser struct {
	mock.Mock
}

type MockSSHKeyParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSSHKeyParser) EXPECT() *MockSSHKeyParser_Expecter {
	return &MockSSHKeyParser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function with given fields: keyPath
func (_m *MockSSHKeyParser) Parse(keyPath string) ssh.Signer {
	ret := _m.Called(keyPath)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 ssh.Signer
	if rf, ok := ret.Get(0).(func(string) ssh.Signer); ok {
		r0 = rf(keyPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ssh.Signer)
		}
	}

	return r0
}

// MockSSHKeyParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type MockSSHKeyParser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - keyPath string
func (_e *MockSSHKeyParser_Expecter) Parse(keyPath interface{}) *MockSSHKeyParser_Parse_Call {
	return &MockSSHKeyParser_Parse_Call{Call: _e.mock.On("Parse", keyPath)}
}

func (_c *MockSSHKeyParser_Parse_Call) Run(run func(keyPath string)) *MockSSHKeyParser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSSHKeyParser_Parse_Call) Return(_a0 ssh.Signer) *MockSSHKeyParser_Parse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHKeyParser_Parse_Call) RunAndReturn(run func(string) ssh.Signer) *MockSSHKeyParser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSSHKeyParser creates a new instance of MockSSHKeyParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSSHKeyParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSSHKeyParser {
	mock := &MockSSHKeyParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
