// Code generated by mockery v2.50.0. DO NOT EDIT.

package cfgutils

import mock "github.com/stretchr/testify/mock"

// MockCfgManager is an autogenerated mock type for the CfgManager type
type MockCfgManager struct {
	mock.Mock
}

type MockCfgManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCfgManager) EXPECT() *MockCfgManager_Expecter {
	return &MockCfgManager_Expecter{mock: &_m.Mock}
}

// IsInit provides a mock function with no fields
func (_m *MockCfgManager) IsInit() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInit")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCfgManager_IsInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInit'
type MockCfgManager_IsInit_Call struct {
	*mock.Call
}

// IsInit is a helper method to define mock.On call
func (_e *MockCfgManager_Expecter) IsInit() *MockCfgManager_IsInit_Call {
	return &MockCfgManager_IsInit_Call{Call: _e.mock.On("IsInit")}
}

func (_c *MockCfgManager_IsInit_Call) Run(run func()) *MockCfgManager_IsInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCfgManager_IsInit_Call) Return(_a0 bool) *MockCfgManager_IsInit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCfgManager_IsInit_Call) RunAndReturn(run func() bool) *MockCfgManager_IsInit_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareMetadata provides a mock function with given fields: instanceId, hostname
func (_m *MockCfgManager) PrepareMetadata(instanceId string, hostname string) string {
	ret := _m.Called(instanceId, hostname)

	if len(ret) == 0 {
		panic("no return value specified for PrepareMetadata")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(instanceId, hostname)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCfgManager_PrepareMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareMetadata'
type MockCfgManager_PrepareMetadata_Call struct {
	*mock.Call
}

// PrepareMetadata is a helper method to define mock.On call
//   - instanceId string
//   - hostname string
func (_e *MockCfgManager_Expecter) PrepareMetadata(instanceId interface{}, hostname interface{}) *MockCfgManager_PrepareMetadata_Call {
	return &MockCfgManager_PrepareMetadata_Call{Call: _e.mock.On("PrepareMetadata", instanceId, hostname)}
}

func (_c *MockCfgManager_PrepareMetadata_Call) Run(run func(instanceId string, hostname string)) *MockCfgManager_PrepareMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockCfgManager_PrepareMetadata_Call) Return(_a0 string) *MockCfgManager_PrepareMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCfgManager_PrepareMetadata_Call) RunAndReturn(run func(string, string) string) *MockCfgManager_PrepareMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareRke2ConfigScript provides a mock function with given fields: configName, machineUUID
func (_m *MockCfgManager) PrepareRke2ConfigScript(configName string, machineUUID string) string {
	ret := _m.Called(configName, machineUUID)

	if len(ret) == 0 {
		panic("no return value specified for PrepareRke2ConfigScript")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(configName, machineUUID)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCfgManager_PrepareRke2ConfigScript_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareRke2ConfigScript'
type MockCfgManager_PrepareRke2ConfigScript_Call struct {
	*mock.Call
}

// PrepareRke2ConfigScript is a helper method to define mock.On call
//   - configName string
//   - machineUUID string
func (_e *MockCfgManager_Expecter) PrepareRke2ConfigScript(configName interface{}, machineUUID interface{}) *MockCfgManager_PrepareRke2ConfigScript_Call {
	return &MockCfgManager_PrepareRke2ConfigScript_Call{Call: _e.mock.On("PrepareRke2ConfigScript", configName, machineUUID)}
}

func (_c *MockCfgManager_PrepareRke2ConfigScript_Call) Run(run func(configName string, machineUUID string)) *MockCfgManager_PrepareRke2ConfigScript_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockCfgManager_PrepareRke2ConfigScript_Call) Return(_a0 string) *MockCfgManager_PrepareRke2ConfigScript_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCfgManager_PrepareRke2ConfigScript_Call) RunAndReturn(run func(string, string) string) *MockCfgManager_PrepareRke2ConfigScript_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareRootPartitionResizeScript provides a mock function with no fields
func (_m *MockCfgManager) PrepareRootPartitionResizeScript() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrepareRootPartitionResizeScript")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCfgManager_PrepareRootPartitionResizeScript_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareRootPartitionResizeScript'
type MockCfgManager_PrepareRootPartitionResizeScript_Call struct {
	*mock.Call
}

// PrepareRootPartitionResizeScript is a helper method to define mock.On call
func (_e *MockCfgManager_Expecter) PrepareRootPartitionResizeScript() *MockCfgManager_PrepareRootPartitionResizeScript_Call {
	return &MockCfgManager_PrepareRootPartitionResizeScript_Call{Call: _e.mock.On("PrepareRootPartitionResizeScript")}
}

func (_c *MockCfgManager_PrepareRootPartitionResizeScript_Call) Run(run func()) *MockCfgManager_PrepareRootPartitionResizeScript_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCfgManager_PrepareRootPartitionResizeScript_Call) Return(_a0 string) *MockCfgManager_PrepareRootPartitionResizeScript_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCfgManager_PrepareRootPartitionResizeScript_Call) RunAndReturn(run func() string) *MockCfgManager_PrepareRootPartitionResizeScript_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCfgManager creates a new instance of MockCfgManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCfgManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCfgManager {
	mock := &MockCfgManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
